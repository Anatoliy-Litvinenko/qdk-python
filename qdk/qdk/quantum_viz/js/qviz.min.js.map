{"version":3,"sources":["webpack://qviz/webpack/universalModuleDefinition","webpack://qviz/webpack/bootstrap","webpack://qviz/./src/constants.ts","webpack://qviz/./src/metadata.ts","webpack://qviz/./src/register.ts","webpack://qviz/./src/formatters/formatUtils.ts","webpack://qviz/./src/circuit.ts","webpack://qviz/./src/utils.ts","webpack://qviz/./src/styles.ts","webpack://qviz/./src/index.ts","webpack://qviz/./src/sqore.ts","webpack://qviz/./src/formatters/inputFormatter.ts","webpack://qviz/./src/formatters/gateFormatter.ts","webpack://qviz/./src/formatters/registerFormatter.ts","webpack://qviz/./src/process.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","regLineStart","argsFontSize","labelFontSize","controlBtnRadius","controlBtnOffset","nestedGroupPadding","groupBoxPadding","classicalRegHeight","registerHeight","labelPadding","gatePadding","gateHeight","minGateWidth","startY","startX","leftPadding","GateType","RegisterType","__spreadArrays","this","il","arguments","length","Array","k","a","j","jl","dashedBox","dashedLine","arc","text","box","line","controlDot","group","constants_1","svgElems","attributes","attrs","entries","filter","_a","map","join","flat","x","y","radius","x1","y1","x2","y2","className","width","height","fs","rx","ry","ConditionalRender","_getStringWidth","getGateWidth","createUUID","metadata_1","replace","Math","random","toString","type","label","displayArgs","Measure","Cnot","Swap","labelWidth","argsWidth","textWidth","max","fontSize","context","document","createElement","getContext","Error","font","measureText","__assign","assign","apply","style","STYLES","defaultStyle","lineStroke","lineWidth","textColour","unitary","oplus","measure","classicalUnknown","classicalZero","classicalOne","classicalZeroText","classicalOneText","Default","BlackAndWhite","Inverted","customStyle","styleConfig","draw","sqore_1","circuit","container","renderDepth","Sqore","styles_1","inputFormatter_1","gateFormatter_1","registerFormatter_1","process_1","circuit_1","utils_1","gateRegistry","getStyle","_this","JSON","parse","stringify","operations","forEach","op","fillGateRegistry","selectOpsAtDepth","dataAttributes","id","expandOperation","renderCircuit","String","styleName","console","error","composedSqore","compose","innerHTML","generateSvg","addGateClickHandlers","gates","result","add","acc","gate","isArray","g","push","children","qubits","formatInputs","qubitWires","registers","svgHeight","_b","processOperations","metadataList","svgWidth","formattedGates","formatGates","measureGates","elements","formatRegisters","operation","childOp","addClassicalControlHandlers","addZoomHandlers","querySelectorAll","btn","addEventListener","evt","textSvg","querySelector","parentElement","currValue","firstChild","nodeValue","zeroGates","oneGates","childNodes","classList","remove","stopPropagation","ctrl","ev","gateId","getAttribute","contains","collapseOperation","conditionalRender","AsGroup","parentId","opId","startsWith","Always","_qubitInput","register_1","currY","numChildren","Qubit","from","clsReg","Classical","_gateControls","_classicalControlled","_groupedOperations","_controlledGate","_swap","_unitary","_measure","_createGate","_formatGate","formatUtils_1","opsMetadata","nestedDepth","metadata","undefined","_gatePosition","atts","ctrls","class","transform","body","attr","val","concat","controlsY","targetsY","Unitary","X","_x","ControlledUnitary","Group","ClassicalControlled","renderDashedLine","unitaryBoxes","maxY","minY","_unitaryBox","lastBox","firstBox","vertLine","labelY","elems","argStrY","argText","ys","flatMap","_cross","_","_oplus","targetGateSvgs","groupedTargetsY","controlledDotsSvg","min","circle","horLine","padding","childrenGates","controlY","childrenZero","childrenOne","controlCircleX","controlCircle","_controlCircle","lineY1","lineY2","_qubitRegister","_classicalRegister","endX","formattedRegs","qId","Number","gateY","wireY","labelOffset","_offsetChildrenX","_fillMetadataX","_splitTargetsY","_getRegY","_opToMetadata","_getClassicalRegStart","_alignOps","_groupOperations","groupedOps","alignedOps","numColumns","ops","columnsWidths","fill","classicalRegs","visited","regOps","opIdx","col","includes","classicalRegY","regCol","reg","cId","targets","Invalid","numRegs","keys","instrIdx","controls","qRegs","qRegIdxList","isClassicallyControlled","minRegIdx","maxRegIdx","maxNumOps","paddedOps","_loop_1","regIdx","targetsPos","indexOf","gatePos","splice","idxList","clsRegs","_loop_2","isMeasurement","isConditional","isControlled","isAdjoint","onZeroOps","OnOne","childrenInstrs","zeroChildWidth","onOneOps","OnZero","oneChildWidth","qubitsY","values","orderedQIds","sort","b","qIdPosition","slice","posDiff","prevPos","prevY","reduce","groups","target","pos","shift","columnWidths","currX","colStartX","offset","child"],"mappings":"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","file":"qviz.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"qviz\"] = factory();\n\telse\n\t\troot[\"qviz\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.regLineStart = exports.argsFontSize = exports.labelFontSize = exports.controlBtnRadius = exports.controlBtnOffset = exports.nestedGroupPadding = exports.groupBoxPadding = exports.classicalRegHeight = exports.registerHeight = exports.labelPadding = exports.gatePadding = exports.gateHeight = exports.minGateWidth = exports.startY = exports.startX = exports.leftPadding = void 0;\r\n// Display attributes\r\n/** Left padding of SVG. */\r\nexports.leftPadding = 20;\r\n/** x coordinate for first operation on each register. */\r\nexports.startX = 80;\r\n/** y coordinate of first register. */\r\nexports.startY = 40;\r\n/** Minimum width of each gate. */\r\nexports.minGateWidth = 40;\r\n/** Height of each gate. */\r\nexports.gateHeight = 40;\r\n/** Padding on each side of gate. */\r\nexports.gatePadding = 10;\r\n/** Padding on each side of gate label. */\r\nexports.labelPadding = 10;\r\n/** Height between each qubit register. */\r\nexports.registerHeight = exports.gateHeight + exports.gatePadding * 2;\r\n/** Height between classical registers. */\r\nexports.classicalRegHeight = exports.gateHeight;\r\n/** Group box inner padding. */\r\nexports.groupBoxPadding = exports.gatePadding;\r\n/** Padding between nested groups. */\r\nexports.nestedGroupPadding = 2;\r\n/** Additional offset for control button. */\r\nexports.controlBtnOffset = 40;\r\n/** Control button radius. */\r\nexports.controlBtnRadius = 15;\r\n/** Default font size for gate labels. */\r\nexports.labelFontSize = 14;\r\n/** Default font size for gate arguments. */\r\nexports.argsFontSize = 12;\r\n/** Starting x coord for each register wire. */\r\nexports.regLineStart = 40;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GateType = void 0;\r\n/**\r\n * Enum for the various gate operations handled.\r\n */\r\nvar GateType;\r\n(function (GateType) {\r\n    /** Measurement gate. */\r\n    GateType[GateType[\"Measure\"] = 0] = \"Measure\";\r\n    /** CNOT gate. */\r\n    GateType[GateType[\"Cnot\"] = 1] = \"Cnot\";\r\n    /** SWAP gate. */\r\n    GateType[GateType[\"Swap\"] = 2] = \"Swap\";\r\n    /** X gate. */\r\n    GateType[GateType[\"X\"] = 3] = \"X\";\r\n    /** Single/multi qubit unitary gate. */\r\n    GateType[GateType[\"Unitary\"] = 4] = \"Unitary\";\r\n    /** Single/multi controlled unitary gate. */\r\n    GateType[GateType[\"ControlledUnitary\"] = 5] = \"ControlledUnitary\";\r\n    /** Nested group of classically-controlled gates. */\r\n    GateType[GateType[\"ClassicalControlled\"] = 6] = \"ClassicalControlled\";\r\n    /** Group of nested gates */\r\n    GateType[GateType[\"Group\"] = 7] = \"Group\";\r\n    /** Invalid gate. */\r\n    GateType[GateType[\"Invalid\"] = 8] = \"Invalid\";\r\n})(GateType = exports.GateType || (exports.GateType = {}));\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RegisterType = void 0;\r\n/**\r\n * Type of register.\r\n */\r\nvar RegisterType;\r\n(function (RegisterType) {\r\n    RegisterType[RegisterType[\"Qubit\"] = 0] = \"Qubit\";\r\n    RegisterType[RegisterType[\"Classical\"] = 1] = \"Classical\";\r\n})(RegisterType = exports.RegisterType || (exports.RegisterType = {}));\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dashedBox = exports.dashedLine = exports.arc = exports.text = exports.box = exports.line = exports.controlDot = exports.group = void 0;\r\nvar constants_1 = require(\"../constants\");\r\n// Helper functions for basic SVG components\r\n/**\r\n * Given an array of SVG elements, group them as an SVG group using the `<g>` tag.\r\n *\r\n * @param svgElems   Array of SVG elements.\r\n * @param attributes Key-value pairs of attributes and they values.\r\n *\r\n * @returns SVG string for grouped elements.\r\n */\r\nexports.group = function (svgElems, attributes) {\r\n    if (attributes === void 0) { attributes = {}; }\r\n    var attrs = Object.entries(attributes)\r\n        .filter(function (_a) {\r\n        var _ = _a[0], val = _a[1];\r\n        return val != null;\r\n    })\r\n        .map(function (_a) {\r\n        var attr = _a[0], val = _a[1];\r\n        return attr + \"='\" + val + \"'\";\r\n    })\r\n        .join(' ');\r\n    return __spreadArrays([\"<g \" + attrs + \">\"], svgElems.flat(), ['</g>']).join('\\n');\r\n};\r\n/**\r\n * Generate the SVG representation of a control dot used for controlled operations.\r\n *\r\n * @param x      x coord of circle.\r\n * @param y      y coord of circle.\r\n * @param radius Radius of circle.\r\n *\r\n * @returns SVG string for control dot.\r\n */\r\nexports.controlDot = function (x, y, radius) {\r\n    if (radius === void 0) { radius = 5; }\r\n    return \"<circle class=\\\"control-dot\\\" cx=\\\"\" + x + \"\\\" cy=\\\"\" + y + \"\\\" r=\\\"\" + radius + \"\\\"></circle>\";\r\n};\r\n/**\r\n * Generate an SVG line.\r\n *\r\n * @param x1        x coord of starting point of line.\r\n * @param y1        y coord of starting point of line.\r\n * @param x2        x coord of ending point of line.\r\n * @param y2        y coord fo ending point of line.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG string for line.\r\n */\r\nexports.line = function (x1, y1, x2, y2, className) {\r\n    var clsString = className != null ? \" class=\\\"\" + className + \"\\\"\" : '';\r\n    return \"<line\" + clsString + \" x1=\\\"\" + x1 + \"\\\" x2=\\\"\" + x2 + \"\\\" y1=\\\"\" + y1 + \"\\\" y2=\\\"\" + y2 + \"\\\"></line>\";\r\n};\r\n/**\r\n * Generate the SVG representation of a unitary box that represents an arbitrary unitary operation.\r\n *\r\n * @param x         x coord of box.\r\n * @param y         y coord of box.\r\n * @param width     Width of box.\r\n * @param height    Height of box.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG string for unitary box.\r\n */\r\nexports.box = function (x, y, width, height, className) {\r\n    if (className === void 0) { className = 'gate-unitary'; }\r\n    return \"<rect class=\\\"\" + className + \"\\\" x=\\\"\" + x + \"\\\" y=\\\"\" + y + \"\\\" width=\\\"\" + width + \"\\\" height=\\\"\" + height + \"\\\"></rect>\";\r\n};\r\n/**\r\n * Generate the SVG text element from a given text string.\r\n *\r\n * @param text String to render as SVG text.\r\n * @param x    Middle x coord of text.\r\n * @param y    Middle y coord of text.\r\n * @param fs   Font size of text.\r\n *\r\n * @returns SVG string for text.\r\n */\r\nexports.text = function (text, x, y, fs) {\r\n    if (fs === void 0) { fs = constants_1.labelFontSize; }\r\n    return \"<text font-size=\\\"\" + fs + \"\\\" x=\\\"\" + x + \"\\\" y=\\\"\" + y + \"\\\">\" + text + \"</text>\";\r\n};\r\n/**\r\n * Generate the SVG representation of the arc used in the measurement box.\r\n *\r\n * @param x  x coord of arc.\r\n * @param y  y coord of arc.\r\n * @param rx x radius of arc.\r\n * @param ry y radius of arc.\r\n *\r\n * @returns SVG string for arc.\r\n */\r\nexports.arc = function (x, y, rx, ry) {\r\n    return \"<path class=\\\"arc-measure\\\" d=\\\"M \" + (x + 2 * rx) + \" \" + y + \" A \" + rx + \" \" + ry + \" 0 0 0 \" + x + \" \" + y + \"\\\"></path>\";\r\n};\r\n/**\r\n * Generate a dashed SVG line.\r\n *\r\n * @param x1        x coord of starting point of line.\r\n * @param y1        y coord of starting point of line.\r\n * @param x2        x coord of ending point of line.\r\n * @param y2        y coord fo ending point of line.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG string for dashed line.\r\n */\r\nexports.dashedLine = function (x1, y1, x2, y2, className) {\r\n    var clsString = className != null ? \" class=\\\"\" + className + \"\\\"\" : '';\r\n    return \"<line\" + clsString + \" x1=\\\"\" + x1 + \"\\\" x2=\\\"\" + x2 + \"\\\" y1=\\\"\" + y1 + \"\\\" y2=\\\"\" + y2 + \"\\\" stroke-dasharray=\\\"8, 8\\\"></line>\";\r\n};\r\n/**\r\n * Generate the SVG representation of the dashed box used for enclosing groups of operations controlled on a classical register.\r\n *\r\n * @param x         x coord of box.\r\n * @param y         y coord of box.\r\n * @param width     Width of box.\r\n * @param height    Height of box.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG string for dashed box.\r\n */\r\nexports.dashedBox = function (x, y, width, height, className) {\r\n    var clsString = className != null ? \" class=\\\"\" + className + \"\\\"\" : '';\r\n    return \"<rect\" + clsString + \" x=\\\"\" + x + \"\\\" y=\\\"\" + y + \"\\\" width=\\\"\" + width + \"\\\" height=\\\"\" + height + \"\\\" fill-opacity=\\\"0\\\" stroke-dasharray=\\\"8, 8\\\"></rect>\";\r\n};\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConditionalRender = void 0;\r\n/**\r\n * Conditions on when to render the given operation.\r\n */\r\nvar ConditionalRender;\r\n(function (ConditionalRender) {\r\n    /** Always rendered. */\r\n    ConditionalRender[ConditionalRender[\"Always\"] = 0] = \"Always\";\r\n    /** Render classically-controlled operation when measurement is a zero. */\r\n    ConditionalRender[ConditionalRender[\"OnZero\"] = 1] = \"OnZero\";\r\n    /** Render classically-controlled operation when measurement is a one. */\r\n    ConditionalRender[ConditionalRender[\"OnOne\"] = 2] = \"OnOne\";\r\n    /** Render operation as a group of its nested operations. */\r\n    ConditionalRender[ConditionalRender[\"AsGroup\"] = 3] = \"AsGroup\";\r\n})(ConditionalRender = exports.ConditionalRender || (exports.ConditionalRender = {}));\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._getStringWidth = exports.getGateWidth = exports.createUUID = void 0;\r\nvar metadata_1 = require(\"./metadata\");\r\nvar constants_1 = require(\"./constants\");\r\n/**\r\n * Generate a UUID using `Math.random`.\r\n * Note: this implementation came from https://stackoverflow.com/questions/105034/how-to-create-guid-uuid\r\n * and is not cryptographically secure but works for our use case.\r\n *\r\n * @returns UUID string.\r\n */\r\nvar createUUID = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\r\nexports.createUUID = createUUID;\r\n/**\r\n * Calculate the width of a gate, given its metadata.\r\n *\r\n * @param metadata Metadata of a given gate.\r\n *\r\n * @returns Width of given gate (in pixels).\r\n */\r\nvar getGateWidth = function (_a) {\r\n    var type = _a.type, label = _a.label, displayArgs = _a.displayArgs, width = _a.width;\r\n    if (width > 0)\r\n        return width;\r\n    switch (type) {\r\n        case metadata_1.GateType.Measure:\r\n        case metadata_1.GateType.Cnot:\r\n        case metadata_1.GateType.Swap:\r\n            return constants_1.minGateWidth;\r\n        default:\r\n            var labelWidth = _getStringWidth(label);\r\n            var argsWidth = displayArgs != null ? _getStringWidth(displayArgs, constants_1.argsFontSize) : 0;\r\n            var textWidth = Math.max(labelWidth, argsWidth) + constants_1.labelPadding * 2;\r\n            return Math.max(constants_1.minGateWidth, textWidth);\r\n    }\r\n};\r\nexports.getGateWidth = getGateWidth;\r\n/**\r\n * Get the width of a string with font-size `fontSize` and font-family Arial.\r\n *\r\n * @param text     Input string.\r\n * @param fontSize Font size of `text`.\r\n *\r\n * @returns Pixel width of given string.\r\n */\r\nvar _getStringWidth = function (text, fontSize) {\r\n    if (fontSize === void 0) { fontSize = constants_1.labelFontSize; }\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    if (context == null)\r\n        throw new Error('Null canvas');\r\n    context.font = fontSize + \"px Arial\";\r\n    var metrics = context.measureText(text);\r\n    return metrics.width;\r\n};\r\nexports._getStringWidth = _getStringWidth;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.style = exports.STYLES = void 0;\r\nvar defaultStyle = {\r\n    lineStroke: '#000000',\r\n    lineWidth: 1,\r\n    textColour: '#000000',\r\n    unitary: '#D9F1FA',\r\n    oplus: '#FFFFFF',\r\n    measure: '#FFDE86',\r\n    classicalUnknown: '#E5E5E5',\r\n    classicalZero: '#C40000',\r\n    classicalOne: '#4059BD',\r\n    classicalZeroText: '#FFFFFF',\r\n    classicalOneText: '#FFFFFF',\r\n};\r\nvar blackAndWhiteStyle = {\r\n    lineStroke: '#000000',\r\n    lineWidth: 1,\r\n    textColour: '#000000',\r\n    unitary: '#FFFFFF',\r\n    oplus: '#FFFFFF',\r\n    measure: '#FFFFFF',\r\n    classicalUnknown: '#FFFFFF',\r\n    classicalZero: '#000000',\r\n    classicalOne: '#000000',\r\n    classicalZeroText: '#FFFFFF',\r\n    classicalOneText: '#FFFFFF',\r\n};\r\nvar invertedStyle = {\r\n    lineStroke: '#FFFFFF',\r\n    lineWidth: 1,\r\n    textColour: '#FFFFFF',\r\n    unitary: '#000000',\r\n    oplus: '#000000',\r\n    measure: '#000000',\r\n    classicalUnknown: '#000000',\r\n    classicalZero: '#FFFFFF',\r\n    classicalOne: '#FFFFFF',\r\n    classicalZeroText: '#000000',\r\n    classicalOneText: '#000000',\r\n};\r\n/**\r\n * Set of default styles.\r\n */\r\nexports.STYLES = {\r\n    /** Default style with coloured gates. */\r\n    Default: defaultStyle,\r\n    /** Black and white style. */\r\n    BlackAndWhite: blackAndWhiteStyle,\r\n    /** Inverted black and white style (for black backgrounds). */\r\n    Inverted: invertedStyle,\r\n};\r\n/**\r\n * CSS style script to be injected into visualization HTML string.\r\n *\r\n * @param customStyle Custom style configuration.\r\n *\r\n * @returns String containing CSS style script.\r\n */\r\nexports.style = function (customStyle) {\r\n    if (customStyle === void 0) { customStyle = {}; }\r\n    var styleConfig = __assign(__assign({}, defaultStyle), customStyle);\r\n    return \"\\n<style>\\n    line,\\n    circle,\\n    rect {\\n        stroke: \" + styleConfig.lineStroke + \";\\n        stroke-width: \" + styleConfig.lineWidth + \";\\n    }\\n    text {\\n        fill: \" + styleConfig.textColour + \";\\n        dominant-baseline: middle;\\n        text-anchor: middle;\\n        font-family: Arial;\\n    }\\n    .control-dot {\\n        fill: \" + styleConfig.lineStroke + \";\\n    }\\n    .oplus line, .oplus circle {\\n        fill: \" + styleConfig.oplus + \";\\n        stroke-width: 2;\\n    }\\n    .gate-unitary {\\n        fill: \" + styleConfig.unitary + \";\\n    }\\n    .gate-measure {\\n        fill: \" + styleConfig.measure + \";\\n    }\\n    rect.gate-swap {\\n        fill: transparent;\\n        stroke: transparent;\\n    }\\n    .arc-measure {\\n        stroke: \" + styleConfig.lineStroke + \";\\n        fill: none;\\n        stroke-width: \" + styleConfig.lineWidth + \";\\n    }\\n    .register-classical {\\n        stroke-width: \" + (styleConfig.lineWidth || 0) / 2 + \";\\n    }\\n    <!-- Classically controlled gates -->\\n    .hidden {\\n        display: none;\\n    }\\n    .classically-controlled-unknown {\\n        opacity: 0.25;\\n    }\\n    <!-- Gate outline -->\\n    .classically-controlled-one .classical-container,\\n    .classically-controlled-one .classical-line {\\n        stroke: \" + styleConfig.classicalOne + \";\\n        stroke-width: \" + ((styleConfig.lineWidth || 0) + 0.3) + \";\\n        fill: \" + styleConfig.classicalOne + \";\\n        fill-opacity: 0.1;\\n    }\\n    .classically-controlled-zero .classical-container,\\n    .classically-controlled-zero .classical-line {\\n        stroke: \" + styleConfig.classicalZero + \";\\n        stroke-width: \" + ((styleConfig.lineWidth || 0) + 0.3) + \";\\n        fill: \" + styleConfig.classicalZero + \";\\n        fill-opacity: 0.1;\\n    }\\n    <!-- Control button -->\\n    .classically-controlled-btn {\\n        cursor: pointer;\\n    }\\n    .classically-controlled-unknown .classically-controlled-btn {\\n        fill: \" + styleConfig.classicalUnknown + \";\\n    }\\n    .classically-controlled-one .classically-controlled-btn {\\n        fill: \" + styleConfig.classicalOne + \";\\n    }\\n    .classically-controlled-zero .classically-controlled-btn {\\n        fill: \" + styleConfig.classicalZero + \";\\n    }\\n    <!-- Control button text -->\\n    .classically-controlled-btn text {\\n        dominant-baseline: middle;\\n        text-anchor: middle;\\n        stroke: none;\\n        font-family: Arial;\\n    }\\n    .classically-controlled-unknown .classically-controlled-btn text {\\n        fill: \" + styleConfig.textColour + \";\\n    }\\n    .classically-controlled-one .classically-controlled-btn text {\\n        fill: \" + styleConfig.classicalOneText + \";\\n    }\\n    .classically-controlled-zero .classically-controlled-btn text {\\n        fill: \" + styleConfig.classicalZeroText + \";\\n    }\\n\\n    .qviz .gate-collapse,\\n    .qviz .gate-expand {\\n        opacity: 0;\\n        transition: opacity 1s;\\n    }\\n\\n    .qviz:hover .gate-collapse,\\n    .qviz:hover .gate-expand {\\n        visibility: visible;\\n        opacity: 0.2;\\n        transition: visibility 1s;\\n        transition: opacity 1s;\\n    }\\n\\n    .gate-expand, .gate-collapse {\\n        cursor: pointer;\\n    }\\n\\n    .gate-collapse circle,\\n    .gate-expand circle {\\n        fill: white;\\n        stroke-width: 2px;\\n        stroke: black;\\n    }\\n    .gate-collapse path,\\n    .gate-expand path {\\n        stroke-width: 4px;\\n        stroke: black;\\n    }\\n\\n    .gate:hover > .gate-collapse,\\n    .gate:hover > .gate-expand {\\n        visibility: visible;\\n        opacity: 1;\\n        transition: opacity 1s;\\n    }\\n</style>\\n\";\r\n};\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.draw = void 0;\r\nvar sqore_1 = require(\"./sqore\");\r\n/**\r\n * Render `circuit` into `container` at the specified layer depth.\r\n *\r\n * @param circuit Circuit to be visualized.\r\n * @param container HTML element for rendering visualization into.\r\n * @param style Custom visualization style.\r\n * @param renderDepth Initial layer depth at which to render gates.\r\n */\r\nexports.draw = function (circuit, container, style, renderDepth) {\r\n    if (style === void 0) { style = {}; }\r\n    if (renderDepth === void 0) { renderDepth = 0; }\r\n    var sqore = new sqore_1.Sqore(circuit, style);\r\n    sqore.draw(container, renderDepth);\r\n};\r\nvar styles_1 = require(\"./styles\");\r\nObject.defineProperty(exports, \"STYLES\", { enumerable: true, get: function () { return styles_1.STYLES; } });\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Sqore = void 0;\r\nvar inputFormatter_1 = require(\"./formatters/inputFormatter\");\r\nvar gateFormatter_1 = require(\"./formatters/gateFormatter\");\r\nvar registerFormatter_1 = require(\"./formatters/registerFormatter\");\r\nvar process_1 = require(\"./process\");\r\nvar circuit_1 = require(\"./circuit\");\r\nvar metadata_1 = require(\"./metadata\");\r\nvar styles_1 = require(\"./styles\");\r\nvar utils_1 = require(\"./utils\");\r\n/**\r\n * Entrypoint class for rendering circuit visualizations.\r\n */\r\nvar Sqore = /** @class */ (function () {\r\n    /**\r\n     * Initializes Sqore object with custom styles.\r\n     *\r\n     * @param circuit Circuit to be visualized.\r\n     * @param style Custom visualization style.\r\n     */\r\n    function Sqore(circuit, style) {\r\n        if (style === void 0) { style = {}; }\r\n        this.style = {};\r\n        this.gateRegistry = {};\r\n        this.circuit = circuit;\r\n        this.style = this.getStyle(style);\r\n    }\r\n    /**\r\n     * Render circuit into `container` at the specified layer depth.\r\n     *\r\n     * @param container HTML element for rendering visualization into.\r\n     * @param renderDepth Initial layer depth at which to render gates.\r\n     */\r\n    Sqore.prototype.draw = function (container, renderDepth) {\r\n        var _this = this;\r\n        if (renderDepth === void 0) { renderDepth = 0; }\r\n        // Inject into container\r\n        if (container == null)\r\n            throw new Error(\"Container not provided.\");\r\n        // Create copy of circuit to prevent mutation\r\n        var circuit = JSON.parse(JSON.stringify(this.circuit));\r\n        // Assign unique IDs to each operation\r\n        circuit.operations.forEach(function (op, i) { return _this.fillGateRegistry(op, i.toString()); });\r\n        // Render operations at starting at given depth\r\n        circuit.operations = this.selectOpsAtDepth(circuit.operations, renderDepth);\r\n        // If only one top-level operation, expand automatically:\r\n        if (circuit.operations.length == 1 &&\r\n            circuit.operations[0].dataAttributes != null &&\r\n            circuit.operations[0].dataAttributes.hasOwnProperty('id')) {\r\n            var id = circuit.operations[0].dataAttributes['id'];\r\n            this.expandOperation(circuit.operations, id);\r\n        }\r\n        this.renderCircuit(container, circuit);\r\n    };\r\n    /**\r\n     * Retrieve style for visualization.\r\n     *\r\n     * @param style Custom style or style name.\r\n     *\r\n     * @returns Custom style.\r\n     */\r\n    Sqore.prototype.getStyle = function (style) {\r\n        if (style === void 0) { style = {}; }\r\n        if (typeof style === 'string' || style instanceof String) {\r\n            var styleName = style;\r\n            if (!styles_1.STYLES.hasOwnProperty(styleName)) {\r\n                console.error(\"No style \" + styleName + \" found in STYLES.\");\r\n                return {};\r\n            }\r\n            style = styles_1.STYLES[styleName];\r\n        }\r\n        return style;\r\n    };\r\n    /**\r\n     * Render circuit into `container`.\r\n     *\r\n     * @param container HTML element for rendering visualization into.\r\n     * @param circuit Circuit object to be rendered.\r\n     */\r\n    Sqore.prototype.renderCircuit = function (container, circuit) {\r\n        // Create visualization components\r\n        var composedSqore = this.compose(circuit);\r\n        container.innerHTML = this.generateSvg(composedSqore);\r\n        this.addGateClickHandlers(container, circuit);\r\n    };\r\n    /**\r\n     * Generates the components required for visualization.\r\n     *\r\n     * @param circuit Circuit to be visualized.\r\n     *\r\n     * @returns `ComposedSqore` object containing metadata for visualization.\r\n     */\r\n    Sqore.prototype.compose = function (circuit) {\r\n        var add = function (acc, gate) {\r\n            var _a;\r\n            if (Array.isArray(gate)) {\r\n                gate.forEach(function (g) { return add(acc, g); });\r\n            }\r\n            else {\r\n                acc.push(gate);\r\n                (_a = gate.children) === null || _a === void 0 ? void 0 : _a.forEach(function (g) { return add(acc, g); });\r\n            }\r\n        };\r\n        var flatten = function (gates) {\r\n            var result = [];\r\n            add(result, gates);\r\n            return result;\r\n        };\r\n        var qubits = circuit.qubits, operations = circuit.operations;\r\n        var _a = inputFormatter_1.formatInputs(qubits), qubitWires = _a.qubitWires, registers = _a.registers, svgHeight = _a.svgHeight;\r\n        var _b = process_1.processOperations(operations, registers), metadataList = _b.metadataList, svgWidth = _b.svgWidth;\r\n        var formattedGates = gateFormatter_1.formatGates(metadataList);\r\n        var measureGates = flatten(metadataList).filter(function (_a) {\r\n            var type = _a.type;\r\n            return type === metadata_1.GateType.Measure;\r\n        });\r\n        var formattedRegs = registerFormatter_1.formatRegisters(registers, measureGates, svgWidth);\r\n        var composedSqore = {\r\n            width: svgWidth,\r\n            height: svgHeight,\r\n            elements: [qubitWires, formattedRegs, formattedGates],\r\n        };\r\n        return composedSqore;\r\n    };\r\n    /**\r\n     * Generates visualization of `composedSqore` as an SVG string.\r\n     *\r\n     * @param composedSqore ComposedSqore to be visualized.\r\n     *\r\n     * @returns SVG representation of circuit visualization.\r\n     */\r\n    // TODO: Return an SVG node instead and attach interactivity.\r\n    Sqore.prototype.generateSvg = function (composedSqore) {\r\n        var uuid = utils_1.createUUID();\r\n        return \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" id=\\\"\" + uuid + \"\\\" class=\\\"qviz\\\" width=\\\"\" + composedSqore.width + \"\\\" height=\\\"\" + composedSqore.height + \"\\\">\\n    \" + styles_1.style(this.style) + \"\\n    \" + composedSqore.elements.join('\\n') + \"\\n</svg>\";\r\n    };\r\n    /**\r\n     * Depth-first traversal to assign unique ID to `operation`.\r\n     * The operation is assigned the id `id` and its `i`th child is recursively given\r\n     * the id `${id}-${i}`.\r\n     *\r\n     * @param operation Operation to be assigned.\r\n     * @param id: ID to assign to `operation`.\r\n     *\r\n     */\r\n    Sqore.prototype.fillGateRegistry = function (operation, id) {\r\n        var _this = this;\r\n        var _a;\r\n        if (operation.dataAttributes == null)\r\n            operation.dataAttributes = {};\r\n        operation.dataAttributes['id'] = id;\r\n        operation.dataAttributes['zoom-out'] = 'false';\r\n        this.gateRegistry[id] = operation;\r\n        (_a = operation.children) === null || _a === void 0 ? void 0 : _a.forEach(function (childOp, i) {\r\n            _this.fillGateRegistry(childOp, id + \"-\" + i);\r\n            if (childOp.dataAttributes == null)\r\n                childOp.dataAttributes = {};\r\n            childOp.dataAttributes['zoom-out'] = 'true';\r\n        });\r\n        operation.dataAttributes['zoom-in'] = (operation.children != null).toString();\r\n    };\r\n    /**\r\n     * Pick out operations that are at or below `renderDepth`.\r\n     *\r\n     * @param operations List of circuit operations.\r\n     * @param renderDepth Initial layer depth at which to render gates.\r\n     *\r\n     * @returns List of operations at or below specifed depth.\r\n     */\r\n    Sqore.prototype.selectOpsAtDepth = function (operations, renderDepth) {\r\n        var _this = this;\r\n        if (renderDepth < 0)\r\n            throw new Error(\"Invalid renderDepth of \" + renderDepth + \". Needs to be >= 0.\");\r\n        if (renderDepth === 0)\r\n            return operations;\r\n        return operations\r\n            .map(function (op) { return (op.children != null ? _this.selectOpsAtDepth(op.children, renderDepth - 1) : op); })\r\n            .flat();\r\n    };\r\n    /**\r\n     * Add interactive click handlers to circuit HTML elements.\r\n     *\r\n     * @param container HTML element containing visualized circuit.\r\n     * @param circuit Circuit to be visualized.\r\n     *\r\n     */\r\n    Sqore.prototype.addGateClickHandlers = function (container, circuit) {\r\n        this.addClassicalControlHandlers(container);\r\n        this.addZoomHandlers(container, circuit);\r\n    };\r\n    /**\r\n     * Add interactive click handlers for classically-controlled operations.\r\n     *\r\n     * @param container HTML element containing visualized circuit.\r\n     *\r\n     */\r\n    Sqore.prototype.addClassicalControlHandlers = function (container) {\r\n        container === null || container === void 0 ? void 0 : container.querySelectorAll('.classically-controlled-btn').forEach(function (btn) {\r\n            // Zoom in on clicked gate\r\n            btn.addEventListener('click', function (evt) {\r\n                var _a;\r\n                var textSvg = btn.querySelector('text');\r\n                var group = btn.parentElement;\r\n                if (textSvg == null || group == null)\r\n                    return;\r\n                var currValue = (_a = textSvg.firstChild) === null || _a === void 0 ? void 0 : _a.nodeValue;\r\n                var zeroGates = group === null || group === void 0 ? void 0 : group.querySelector('.gates-zero');\r\n                var oneGates = group === null || group === void 0 ? void 0 : group.querySelector('.gates-one');\r\n                switch (currValue) {\r\n                    case '?':\r\n                        textSvg.childNodes[0].nodeValue = '1';\r\n                        group.classList.remove('classically-controlled-unknown');\r\n                        group.classList.remove('classically-controlled-zero');\r\n                        group.classList.add('classically-controlled-one');\r\n                        zeroGates === null || zeroGates === void 0 ? void 0 : zeroGates.classList.add('hidden');\r\n                        oneGates === null || oneGates === void 0 ? void 0 : oneGates.classList.remove('hidden');\r\n                        break;\r\n                    case '1':\r\n                        textSvg.childNodes[0].nodeValue = '0';\r\n                        group.classList.remove('classically-controlled-unknown');\r\n                        group.classList.add('classically-controlled-zero');\r\n                        group.classList.remove('classically-controlled-one');\r\n                        zeroGates === null || zeroGates === void 0 ? void 0 : zeroGates.classList.remove('hidden');\r\n                        oneGates === null || oneGates === void 0 ? void 0 : oneGates.classList.add('hidden');\r\n                        break;\r\n                    case '0':\r\n                        textSvg.childNodes[0].nodeValue = '?';\r\n                        group.classList.add('classically-controlled-unknown');\r\n                        group.classList.remove('classically-controlled-zero');\r\n                        group.classList.remove('classically-controlled-one');\r\n                        zeroGates === null || zeroGates === void 0 ? void 0 : zeroGates.classList.remove('hidden');\r\n                        oneGates === null || oneGates === void 0 ? void 0 : oneGates.classList.remove('hidden');\r\n                        break;\r\n                }\r\n                evt.stopPropagation();\r\n            });\r\n        });\r\n        return container;\r\n    };\r\n    /**\r\n     * Add interactive click handlers for zoom-in/out functionality.\r\n     *\r\n     * @param container HTML element containing visualized circuit.\r\n     * @param circuit Circuit to be visualized.\r\n     *\r\n     */\r\n    Sqore.prototype.addZoomHandlers = function (container, circuit) {\r\n        var _this = this;\r\n        container.querySelectorAll(\".gate .gate-control\").forEach(function (ctrl) {\r\n            // Zoom in on clicked gate\r\n            ctrl.addEventListener('click', function (ev) {\r\n                var _a;\r\n                var gateId = (_a = ctrl.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute('data-id');\r\n                if (typeof gateId == 'string') {\r\n                    if (ctrl.classList.contains('gate-collapse')) {\r\n                        _this.collapseOperation(circuit.operations, gateId);\r\n                    }\r\n                    else if (ctrl.classList.contains('gate-expand')) {\r\n                        _this.expandOperation(circuit.operations, gateId);\r\n                    }\r\n                    _this.renderCircuit(container, circuit);\r\n                    ev.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Expand selected operation for zoom-in interaction.\r\n     *\r\n     * @param operations List of circuit operations.\r\n     * @param id ID of operation to expand.\r\n     *\r\n     */\r\n    Sqore.prototype.expandOperation = function (operations, id) {\r\n        var _this = this;\r\n        operations.forEach(function (op) {\r\n            if (op.conditionalRender === circuit_1.ConditionalRender.AsGroup)\r\n                _this.expandOperation(op.children || [], id);\r\n            if (op.dataAttributes == null)\r\n                return op;\r\n            var opId = op.dataAttributes['id'];\r\n            if (opId === id && op.children != null) {\r\n                op.conditionalRender = circuit_1.ConditionalRender.AsGroup;\r\n                op.dataAttributes['expanded'] = 'true';\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Collapse selected operation for zoom-out interaction.\r\n     *\r\n     * @param operations List of circuit operations.\r\n     * @param id ID of operation to collapse.\r\n     *\r\n     */\r\n    Sqore.prototype.collapseOperation = function (operations, parentId) {\r\n        var _this = this;\r\n        operations.forEach(function (op) {\r\n            if (op.conditionalRender === circuit_1.ConditionalRender.AsGroup)\r\n                _this.collapseOperation(op.children || [], parentId);\r\n            if (op.dataAttributes == null)\r\n                return op;\r\n            var opId = op.dataAttributes['id'];\r\n            // Collapse parent gate and its children\r\n            if (opId.startsWith(parentId))\r\n                op.conditionalRender = circuit_1.ConditionalRender.Always;\r\n            // Allow parent gate to be interactive again\r\n            if (opId === parentId)\r\n                delete op.dataAttributes['expanded'];\r\n        });\r\n    };\r\n    return Sqore;\r\n}());\r\nexports.Sqore = Sqore;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._qubitInput = exports.formatInputs = void 0;\r\nvar register_1 = require(\"../register\");\r\nvar constants_1 = require(\"../constants\");\r\n/**\r\n * `formatInputs` takes in an array of Qubits and outputs the SVG string of formatted\r\n * qubit wires and a mapping from register IDs to register metadata (for rendering).\r\n *\r\n * @param qubits List of declared qubits.\r\n *\r\n * @returns returns the SVG string of formatted qubit wires, a mapping from registers\r\n *          to y coord and total SVG height.\r\n */\r\nvar formatInputs = function (qubits) {\r\n    var qubitWires = [];\r\n    var registers = {};\r\n    var currY = constants_1.startY;\r\n    qubits.forEach(function (_a) {\r\n        var id = _a.id, numChildren = _a.numChildren;\r\n        // Add qubit wire to list of qubit wires\r\n        qubitWires.push(_qubitInput(currY));\r\n        // Create qubit register\r\n        registers[id] = { type: register_1.RegisterType.Qubit, y: currY };\r\n        // If there are no attached classical registers, increment y by fixed register height\r\n        if (numChildren == null || numChildren === 0) {\r\n            currY += constants_1.registerHeight;\r\n            return;\r\n        }\r\n        // Increment current height by classical register height for attached classical registers\r\n        currY += constants_1.classicalRegHeight;\r\n        // Add classical wires\r\n        registers[id].children = Array.from(Array(numChildren), function () {\r\n            var clsReg = { type: register_1.RegisterType.Classical, y: currY };\r\n            currY += constants_1.classicalRegHeight;\r\n            return clsReg;\r\n        });\r\n    });\r\n    return {\r\n        qubitWires: qubitWires.join('\\n'),\r\n        registers: registers,\r\n        svgHeight: currY,\r\n    };\r\n};\r\nexports.formatInputs = formatInputs;\r\n/**\r\n * Generate the SVG text component for the input qubit register.\r\n *\r\n * @param y y coord of input wire to render in SVG.\r\n *\r\n * @returns SVG text component for the input register.\r\n */\r\nvar _qubitInput = function (y) {\r\n    return \"<text x=\\\"\" + constants_1.leftPadding + \"\\\" y=\\\"\" + y + \"\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"start\\\">|0\\u27E9</text>\";\r\n};\r\nexports._qubitInput = _qubitInput;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._gateControls = exports._classicalControlled = exports._groupedOperations = exports._controlledGate = exports._swap = exports._unitary = exports._measure = exports._createGate = exports._formatGate = exports.formatGates = void 0;\r\nvar metadata_1 = require(\"../metadata\");\r\nvar constants_1 = require(\"../constants\");\r\nvar formatUtils_1 = require(\"./formatUtils\");\r\n/**\r\n * Given an array of operations (in metadata format), return the SVG representation.\r\n *\r\n * @param opsMetadata Array of Metadata representation of operations.\r\n * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).\r\n *\r\n * @returns SVG representation of operations.\r\n */\r\nvar formatGates = function (opsMetadata, nestedDepth) {\r\n    if (nestedDepth === void 0) { nestedDepth = 0; }\r\n    var formattedGates = opsMetadata.map(function (metadata) { return _formatGate(metadata, nestedDepth); });\r\n    return formattedGates.flat().join('\\n');\r\n};\r\nexports.formatGates = formatGates;\r\nvar _gateControls = function (metadata, nestedDepth) {\r\n    if (metadata == undefined)\r\n        return [];\r\n    var _a = _gatePosition(metadata, nestedDepth), x1 = _a[0], y1 = _a[1];\r\n    var dataAttributes = metadata.dataAttributes;\r\n    var atts = dataAttributes || {};\r\n    var ctrls = [];\r\n    var expanded = 'expanded' in atts;\r\n    // Add collapse if expanded.\r\n    if (expanded) {\r\n        ctrls.push(formatUtils_1.group(['<circle cx=\"0\" cy=\"0\" r=\"10\" />', '<path d=\"M-7,0 H7\" />'], {\r\n            class: 'gate-control gate-collapse',\r\n            transform: \"translate(\" + (x1 + 2) + \", \" + (y1 + 2) + \")\",\r\n        }));\r\n    }\r\n    else if (atts['zoom-in'] == 'true') {\r\n        ctrls.push(formatUtils_1.group(['<circle cx=\"0\" cy=\"0\" r=\"10\" />', '<path d=\"M0,-7 V7 M-7,0 H7\" />'], {\r\n            class: 'gate-control gate-expand',\r\n            transform: \"translate(\" + (x1 + 2) + \", \" + (y1 + 2) + \")\",\r\n        }));\r\n    }\r\n    return ctrls;\r\n};\r\nexports._gateControls = _gateControls;\r\n/**\r\n * Groups SVG elements into a gate SVG group.\r\n *\r\n * @param svgElems       Array of SVG elements.\r\n * @param dataAttributes Custom data attributes to be attached to SVG group.\r\n *\r\n * @returns SVG representation of a gate.\r\n */\r\nvar _createGate = function (body, metadata, nestedDepth) {\r\n    var ctrls = _gateControls(metadata, nestedDepth);\r\n    var dataAttributes = (metadata || {}).dataAttributes;\r\n    var attributes = { class: 'gate' };\r\n    Object.entries(dataAttributes || {}).forEach(function (_a) {\r\n        var attr = _a[0], val = _a[1];\r\n        return (attributes[\"data-\" + attr] = val);\r\n    });\r\n    return formatUtils_1.group(body.concat(ctrls), attributes);\r\n};\r\nexports._createGate = _createGate;\r\n/**\r\n * Takes in an operation's metadata and formats it into SVG.\r\n *\r\n * @param metadata Metadata object representation of gate.\r\n * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).\r\n *\r\n * @returns SVG representation of gate.\r\n */\r\nvar _formatGate = function (metadata, nestedDepth) {\r\n    if (nestedDepth === void 0) { nestedDepth = 0; }\r\n    var type = metadata.type, x = metadata.x, controlsY = metadata.controlsY, targetsY = metadata.targetsY, label = metadata.label, displayArgs = metadata.displayArgs, width = metadata.width;\r\n    switch (type) {\r\n        case metadata_1.GateType.Measure:\r\n            return _createGate([_measure(x, controlsY[0])], metadata, nestedDepth);\r\n        case metadata_1.GateType.Unitary:\r\n            return _createGate([_unitary(label, x, targetsY, width, displayArgs)], metadata, nestedDepth);\r\n        case metadata_1.GateType.X:\r\n            return _createGate([_x(metadata, nestedDepth)], metadata, nestedDepth);\r\n        case metadata_1.GateType.Swap:\r\n            return controlsY.length > 0\r\n                ? _controlledGate(metadata, nestedDepth)\r\n                : _createGate([_swap(metadata, nestedDepth)], metadata, nestedDepth);\r\n        case metadata_1.GateType.Cnot:\r\n        case metadata_1.GateType.ControlledUnitary:\r\n            return _controlledGate(metadata, nestedDepth);\r\n        case metadata_1.GateType.Group:\r\n            return _groupedOperations(metadata, nestedDepth);\r\n        case metadata_1.GateType.ClassicalControlled:\r\n            return _classicalControlled(metadata);\r\n        default:\r\n            throw new Error(\"ERROR: unknown gate (\" + label + \") of type \" + type + \".\");\r\n    }\r\n};\r\nexports._formatGate = _formatGate;\r\n/**\r\n * Creates a measurement gate at position (x, y).\r\n *\r\n * @param x  x coord of measurement gate.\r\n * @param y  y coord of measurement gate.\r\n *\r\n * @returns SVG representation of measurement gate.\r\n */\r\nvar _measure = function (x, y) {\r\n    x -= constants_1.minGateWidth / 2;\r\n    var width = constants_1.minGateWidth, height = constants_1.gateHeight;\r\n    // Draw measurement box\r\n    var mBox = formatUtils_1.box(x, y - height / 2, width, height, 'gate-measure');\r\n    var mArc = formatUtils_1.arc(x + 5, y + 2, width / 2 - 5, height / 2 - 8);\r\n    var meter = formatUtils_1.line(x + width / 2, y + 8, x + width - 8, y - height / 2 + 8);\r\n    return [mBox, mArc, meter].join('\\n');\r\n};\r\nexports._measure = _measure;\r\n/**\r\n * Creates the SVG for a unitary gate on an arbitrary number of qubits.\r\n *\r\n * @param label            Gate label.\r\n * @param x                x coord of gate.\r\n * @param y                Array of y coords of registers acted upon by gate.\r\n * @param width            Width of gate.\r\n * @param displayArgs           Arguments passed in to gate.\r\n * @param renderDashedLine If true, draw dashed lines between non-adjacent unitaries.\r\n *\r\n * @returns SVG representation of unitary gate.\r\n */\r\nvar _unitary = function (label, x, y, width, displayArgs, renderDashedLine) {\r\n    if (renderDashedLine === void 0) { renderDashedLine = true; }\r\n    if (y.length === 0)\r\n        return '';\r\n    // Render each group as a separate unitary boxes\r\n    var unitaryBoxes = y.map(function (group) {\r\n        var maxY = group[group.length - 1], minY = group[0];\r\n        var height = maxY - minY + constants_1.gateHeight;\r\n        return _unitaryBox(label, x, minY, width, height, displayArgs);\r\n    });\r\n    // Draw dashed line between disconnected unitaries\r\n    if (renderDashedLine && unitaryBoxes.length > 1) {\r\n        var lastBox = y[y.length - 1];\r\n        var firstBox = y[0];\r\n        var maxY = lastBox[lastBox.length - 1], minY = firstBox[0];\r\n        var vertLine = formatUtils_1.dashedLine(x, minY, x, maxY);\r\n        return __spreadArrays([vertLine], unitaryBoxes).join('\\n');\r\n    }\r\n    else\r\n        return unitaryBoxes.join('\\n');\r\n};\r\nexports._unitary = _unitary;\r\n/**\r\n * Generates SVG representation of the boxed unitary gate symbol.\r\n *\r\n * @param label  Label for unitary operation.\r\n * @param x      x coord of gate.\r\n * @param y      y coord of gate.\r\n * @param width  Width of gate.\r\n * @param height Height of gate.\r\n * @param displayArgs Arguments passed in to gate.\r\n *\r\n * @returns SVG representation of unitary box.\r\n */\r\nvar _unitaryBox = function (label, x, y, width, height, displayArgs) {\r\n    if (height === void 0) { height = constants_1.gateHeight; }\r\n    y -= constants_1.gateHeight / 2;\r\n    var uBox = formatUtils_1.box(x - width / 2, y, width, height);\r\n    var labelY = y + height / 2 - (displayArgs == null ? 0 : 7);\r\n    var labelText = formatUtils_1.text(label, x, labelY);\r\n    var elems = [uBox, labelText];\r\n    if (displayArgs != null) {\r\n        var argStrY = y + height / 2 + 8;\r\n        var argText = formatUtils_1.text(displayArgs, x, argStrY, constants_1.argsFontSize);\r\n        elems.push(argText);\r\n    }\r\n    return elems.join('\\n');\r\n};\r\n/**\r\n * Creates the SVG for a SWAP gate on y coords given by targetsY.\r\n *\r\n * @param x          Centre x coord of SWAP gate.\r\n * @param targetsY   y coords of target registers.\r\n *\r\n * @returns SVG representation of SWAP gate.\r\n */\r\nvar _swap = function (metadata, nestedDepth) {\r\n    var x = metadata.x, targetsY = metadata.targetsY;\r\n    // Get SVGs of crosses\r\n    var _a = _gatePosition(metadata, nestedDepth), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];\r\n    var ys = (targetsY === null || targetsY === void 0 ? void 0 : targetsY.flatMap(function (y) { return y; })) || [];\r\n    var bg = formatUtils_1.box(x1, y1, x2, y2, 'gate-swap');\r\n    var crosses = ys.map(function (y) { return _cross(x, y); });\r\n    var vertLine = formatUtils_1.line(x, ys[0], x, ys[1]);\r\n    return [bg, crosses, vertLine].join('\\n');\r\n};\r\nexports._swap = _swap;\r\n/**\r\n * Creates the SVG for an X gate\r\n *\r\n * @returns SVG representation of X gate.\r\n */\r\nvar _x = function (metadata, _) {\r\n    var x = metadata.x, targetsY = metadata.targetsY;\r\n    var ys = targetsY.flatMap(function (y) { return y; });\r\n    var circle = _oplus(x, ys[0]);\r\n    return circle;\r\n};\r\n/**\r\n * Generates cross for display in SWAP gate.\r\n *\r\n * @param x x coord of gate.\r\n * @param y y coord of gate.\r\n *\r\n * @returns SVG representation for cross.\r\n */\r\nvar _cross = function (x, y) {\r\n    var radius = 8;\r\n    var line1 = formatUtils_1.line(x - radius, y - radius, x + radius, y + radius);\r\n    var line2 = formatUtils_1.line(x - radius, y + radius, x + radius, y - radius);\r\n    return [line1, line2].join('\\n');\r\n};\r\n/**\r\n * Produces the SVG representation of a controlled gate on multiple qubits.\r\n *\r\n * @param metadata Metadata of controlled gate.\r\n *\r\n * @returns SVG representation of controlled gate.\r\n */\r\nvar _controlledGate = function (metadata, nestedDepth) {\r\n    var targetGateSvgs = [];\r\n    var type = metadata.type, x = metadata.x, controlsY = metadata.controlsY, label = metadata.label, displayArgs = metadata.displayArgs, width = metadata.width;\r\n    var targetsY = metadata.targetsY;\r\n    // Get SVG for target gates\r\n    switch (type) {\r\n        case metadata_1.GateType.Cnot:\r\n            targetsY.forEach(function (y) { return targetGateSvgs.push(_oplus(x, y)); });\r\n            break;\r\n        case metadata_1.GateType.Swap:\r\n            targetsY.forEach(function (y) { return targetGateSvgs.push(_cross(x, y)); });\r\n            break;\r\n        case metadata_1.GateType.ControlledUnitary:\r\n            var groupedTargetsY = targetsY;\r\n            targetGateSvgs.push(_unitary(label, x, groupedTargetsY, width, displayArgs, false));\r\n            targetsY = targetsY.flat();\r\n            break;\r\n        default:\r\n            throw new Error(\"ERROR: Unrecognized gate: \" + label + \" of type \" + type);\r\n    }\r\n    // Get SVGs for control dots\r\n    var controlledDotsSvg = controlsY.map(function (y) { return formatUtils_1.controlDot(x, y); });\r\n    // Create control lines\r\n    var maxY = Math.max.apply(Math, __spreadArrays(controlsY, targetsY));\r\n    var minY = Math.min.apply(Math, __spreadArrays(controlsY, targetsY));\r\n    var vertLine = formatUtils_1.line(x, minY, x, maxY);\r\n    var svg = _createGate(__spreadArrays([vertLine], controlledDotsSvg, targetGateSvgs), metadata, nestedDepth);\r\n    return svg;\r\n};\r\nexports._controlledGate = _controlledGate;\r\n/**\r\n * Generates $\\oplus$ symbol for display in CNOT gate.\r\n *\r\n * @param x x coordinate of gate.\r\n * @param y y coordinate of gate.\r\n * @param r radius of circle.\r\n *\r\n * @returns SVG representation of $\\oplus$ symbol.\r\n */\r\nvar _oplus = function (x, y, r) {\r\n    if (r === void 0) { r = 15; }\r\n    var circle = \"<circle class=\\\"oplus\\\" cx=\\\"\" + x + \"\\\" cy=\\\"\" + y + \"\\\" r=\\\"\" + r + \"\\\"></circle>\";\r\n    var vertLine = formatUtils_1.line(x, y - r, x, y + r);\r\n    var horLine = formatUtils_1.line(x - r, y, x + r, y);\r\n    return formatUtils_1.group([circle, vertLine, horLine], { class: 'oplus' });\r\n};\r\nvar _gatePosition = function (metadata, nestedDepth) {\r\n    var x = metadata.x, width = metadata.width, type = metadata.type, targetsY = metadata.targetsY;\r\n    var ys = (targetsY === null || targetsY === void 0 ? void 0 : targetsY.flatMap(function (y) { return y; })) || [];\r\n    var maxY = Math.max.apply(Math, ys);\r\n    var minY = Math.min.apply(Math, ys);\r\n    var x1, y1, x2, y2;\r\n    switch (type) {\r\n        case metadata_1.GateType.Group:\r\n            var padding = constants_1.groupBoxPadding - nestedDepth * constants_1.nestedGroupPadding;\r\n            x1 = x - 2 * padding;\r\n            y1 = minY - constants_1.gateHeight / 2 - padding;\r\n            x2 = width + 2 * padding;\r\n            y2 = maxY + +constants_1.gateHeight / 2 + padding - (minY - constants_1.gateHeight / 2 - padding);\r\n            return [x1, y1, x2, y2];\r\n        default:\r\n            x1 = x - width / 2;\r\n            y1 = minY - constants_1.gateHeight / 2;\r\n            x2 = x + width;\r\n            y2 = maxY + constants_1.gateHeight / 2;\r\n    }\r\n    return [x1, y1, x2, y2];\r\n};\r\n/**\r\n * Generates the SVG for a group of nested operations.\r\n *\r\n * @param metadata Metadata representation of gate.\r\n * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).\r\n *\r\n * @returns SVG representation of gate.\r\n */\r\nvar _groupedOperations = function (metadata, nestedDepth) {\r\n    var children = metadata.children;\r\n    var _a = _gatePosition(metadata, nestedDepth), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];\r\n    var childrenGates = children != null ? formatGates(children, nestedDepth + 1) : '';\r\n    // Draw dashed box around children gates\r\n    var box = formatUtils_1.dashedBox(x1, y1, x2, y2);\r\n    return _createGate([box, childrenGates], metadata, nestedDepth);\r\n};\r\nexports._groupedOperations = _groupedOperations;\r\n/**\r\n * Generates the SVG for a classically controlled group of operations.\r\n *\r\n * @param metadata Metadata representation of gate.\r\n * @param padding  Padding within dashed box.\r\n *\r\n * @returns SVG representation of gate.\r\n */\r\nvar _classicalControlled = function (metadata, padding) {\r\n    if (padding === void 0) { padding = constants_1.groupBoxPadding; }\r\n    var controlsY = metadata.controlsY, dataAttributes = metadata.dataAttributes;\r\n    var targetsY = metadata.targetsY;\r\n    var children = metadata.children;\r\n    var x = metadata.x, width = metadata.width;\r\n    var controlY = controlsY[0];\r\n    // Get SVG for gates controlled on 0\r\n    var childrenZero = children != null ? formatGates(children[0]) : '';\r\n    childrenZero = \"<g class=\\\"gates-zero\\\">\\r\\n\" + childrenZero + \"</g>\";\r\n    // Get SVG for gates controlled on 1\r\n    var childrenOne = children != null ? formatGates(children[1]) : '';\r\n    childrenOne = \"<g class=\\\"gates-one\\\">\\r\\n\" + childrenOne + \"</g>\";\r\n    // Draw control button and attached dashed line to dashed box\r\n    var controlCircleX = x + constants_1.controlBtnRadius;\r\n    var controlCircle = _controlCircle(controlCircleX, controlY);\r\n    var lineY1 = controlY + constants_1.controlBtnRadius, lineY2 = controlY + constants_1.classicalRegHeight / 2;\r\n    var vertLine = formatUtils_1.dashedLine(controlCircleX, lineY1, controlCircleX, lineY2, 'classical-line');\r\n    x += constants_1.controlBtnOffset;\r\n    var horLine = formatUtils_1.dashedLine(controlCircleX, lineY2, x, lineY2, 'classical-line');\r\n    width = width - constants_1.controlBtnOffset + (padding - constants_1.groupBoxPadding) * 2;\r\n    x += constants_1.groupBoxPadding - padding;\r\n    var y = targetsY[0] - constants_1.gateHeight / 2 - padding;\r\n    var height = targetsY[1] - targetsY[0] + constants_1.gateHeight + padding * 2;\r\n    // Draw dashed box around children gates\r\n    var box = formatUtils_1.dashedBox(x, y, width, height, 'classical-container');\r\n    // Display controlled operation in initial \"unknown\" state\r\n    var attributes = {\r\n        class: \"classically-controlled-group classically-controlled-unknown\",\r\n    };\r\n    if (dataAttributes != null)\r\n        Object.entries(dataAttributes).forEach(function (_a) {\r\n            var attr = _a[0], val = _a[1];\r\n            return (attributes[\"data-\" + attr] = val);\r\n        });\r\n    return formatUtils_1.group([horLine, vertLine, controlCircle, childrenZero, childrenOne, box], attributes);\r\n};\r\nexports._classicalControlled = _classicalControlled;\r\n/**\r\n * Generates the SVG representation of the control circle on a classical register with interactivity support\r\n * for toggling between bit values (unknown, 1, and 0).\r\n *\r\n * @param x   x coord.\r\n * @param y   y coord.\r\n * @param cls Class name.\r\n * @param r   Radius of circle.\r\n *\r\n * @returns SVG representation of control circle.\r\n */\r\nvar _controlCircle = function (x, y, r) {\r\n    if (r === void 0) { r = constants_1.controlBtnRadius; }\r\n    return \"<g class=\\\"classically-controlled-btn\\\">\\n<circle cx=\\\"\" + x + \"\\\" cy=\\\"\" + y + \"\\\" r=\\\"\" + r + \"\\\"></circle>\\n<text font-size=\\\"\" + constants_1.labelFontSize + \"\\\" x=\\\"\" + x + \"\\\" y=\\\"\" + y + \"\\\">?</text>\\n</g>\";\r\n};\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._qubitRegister = exports._classicalRegister = exports.formatRegisters = void 0;\r\nvar constants_1 = require(\"../constants\");\r\nvar metadata_1 = require(\"../metadata\");\r\nvar formatUtils_1 = require(\"./formatUtils\");\r\n/**\r\n * Generate the SVG representation of the qubit register wires in `registers` and the classical wires\r\n * stemming from each measurement gate.\r\n *\r\n * @param registers    Map from register IDs to register metadata.\r\n * @param measureGates Array of measurement gates metadata.\r\n * @param endX         End x coord.\r\n *\r\n * @returns SVG representation of register wires.\r\n */\r\nvar formatRegisters = function (registers, measureGates, endX) {\r\n    var formattedRegs = [];\r\n    // Render qubit wires\r\n    for (var qId in registers) {\r\n        formattedRegs.push(_qubitRegister(Number(qId), endX, registers[qId].y));\r\n    }\r\n    // Render classical wires\r\n    measureGates.forEach(function (_a) {\r\n        var type = _a.type, x = _a.x, targetsY = _a.targetsY, controlsY = _a.controlsY;\r\n        if (type !== metadata_1.GateType.Measure)\r\n            return;\r\n        var gateY = controlsY[0];\r\n        targetsY.forEach(function (y) {\r\n            formattedRegs.push(_classicalRegister(x, gateY, endX, y));\r\n        });\r\n    });\r\n    return formattedRegs.join('\\n');\r\n};\r\nexports.formatRegisters = formatRegisters;\r\n/**\r\n * Generates the SVG representation of a classical register.\r\n *\r\n * @param startX Start x coord.\r\n * @param gateY  y coord of measurement gate.\r\n * @param endX   End x coord.\r\n * @param wireY  y coord of wire.\r\n *\r\n * @returns SVG representation of the given classical register.\r\n */\r\nvar _classicalRegister = function (startX, gateY, endX, wireY) {\r\n    var wirePadding = 1;\r\n    // Draw vertical lines\r\n    var vLine1 = formatUtils_1.line(startX + wirePadding, gateY, startX + wirePadding, wireY - wirePadding, 'register-classical');\r\n    var vLine2 = formatUtils_1.line(startX - wirePadding, gateY, startX - wirePadding, wireY + wirePadding, 'register-classical');\r\n    // Draw horizontal lines\r\n    var hLine1 = formatUtils_1.line(startX + wirePadding, wireY - wirePadding, endX, wireY - wirePadding, 'register-classical');\r\n    var hLine2 = formatUtils_1.line(startX - wirePadding, wireY + wirePadding, endX, wireY + wirePadding, 'register-classical');\r\n    var svg = [vLine1, vLine2, hLine1, hLine2].join('\\n');\r\n    return svg;\r\n};\r\nexports._classicalRegister = _classicalRegister;\r\n/**\r\n * Generates the SVG representation of a qubit register.\r\n *\r\n * @param qId         Qubit register index.\r\n * @param endX        End x coord.\r\n * @param y           y coord of wire.\r\n * @param labelOffset y offset for wire label.\r\n *\r\n * @returns SVG representation of the given qubit register.\r\n */\r\nvar _qubitRegister = function (qId, endX, y, labelOffset) {\r\n    if (labelOffset === void 0) { labelOffset = 16; }\r\n    var labelY = y - labelOffset;\r\n    var wire = formatUtils_1.line(constants_1.regLineStart, y, endX, y);\r\n    var label = \"<text x=\\\"\" + constants_1.regLineStart + \"\\\" y=\\\"\" + labelY + \"\\\" dominant-baseline=\\\"hanging\\\" text-anchor=\\\"start\\\" font-size=\\\"75%\\\">q\" + qId + \"</text>\";\r\n    var svg = [wire, label].join('\\n');\r\n    return svg;\r\n};\r\nexports._qubitRegister = _qubitRegister;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._offsetChildrenX = exports._fillMetadataX = exports._splitTargetsY = exports._getRegY = exports._opToMetadata = exports._getClassicalRegStart = exports._alignOps = exports._groupOperations = exports.processOperations = void 0;\r\nvar constants_1 = require(\"./constants\");\r\nvar circuit_1 = require(\"./circuit\");\r\nvar metadata_1 = require(\"./metadata\");\r\nvar register_1 = require(\"./register\");\r\nvar utils_1 = require(\"./utils\");\r\n/**\r\n * Takes in a list of operations and maps them to `metadata` objects which\r\n * contains information for formatting the corresponding SVG.\r\n *\r\n * @param operations Array of operations.\r\n * @param registers  Mapping from qubit IDs to register metadata.\r\n *\r\n * @returns An object containing `metadataList` (Array of Metadata objects) and\r\n *          `svgWidth` which is the width of the entire SVG.\r\n */\r\nvar processOperations = function (operations, registers) {\r\n    if (operations.length === 0)\r\n        return { metadataList: [], svgWidth: constants_1.startX };\r\n    // Group operations based on registers\r\n    var groupedOps = _groupOperations(operations, registers);\r\n    // Align operations on multiple registers\r\n    var alignedOps = _alignOps(groupedOps);\r\n    // Maintain widths of each column to account for variable-sized gates\r\n    var numColumns = Math.max.apply(Math, __spreadArrays([0], alignedOps.map(function (ops) { return ops.length; })));\r\n    var columnsWidths = new Array(numColumns).fill(constants_1.minGateWidth);\r\n    // Get classical registers and their starting column index\r\n    var classicalRegs = _getClassicalRegStart(operations, alignedOps);\r\n    // Keep track of which ops are already seen to avoid duplicate rendering\r\n    var visited = {};\r\n    // Map operation index to gate metadata for formatting later\r\n    var opsMetadata = alignedOps.map(function (regOps) {\r\n        return regOps.map(function (opIdx, col) {\r\n            var op = null;\r\n            if (opIdx != null && !visited.hasOwnProperty(opIdx)) {\r\n                op = operations[opIdx];\r\n                visited[opIdx] = true;\r\n            }\r\n            var metadata = _opToMetadata(op, registers);\r\n            if (op != null && [metadata_1.GateType.Unitary, metadata_1.GateType.ControlledUnitary].includes(metadata.type)) {\r\n                // If gate is a unitary type, split targetsY into groups if there\r\n                // is a classical register between them for rendering\r\n                // Get y coordinates of classical registers in the same column as this operation\r\n                var classicalRegY = classicalRegs\r\n                    .filter(function (_a) {\r\n                    var regCol = _a[0], _ = _a[1];\r\n                    return regCol <= col;\r\n                })\r\n                    .map(function (_a) {\r\n                    var _ = _a[0], reg = _a[1];\r\n                    if (reg.cId == null)\r\n                        throw new Error('Could not find cId for classical register.');\r\n                    var children = registers[reg.qId].children;\r\n                    if (children == null)\r\n                        throw new Error(\"Failed to find classical registers for qubit ID \" + reg.qId + \".\");\r\n                    return children[reg.cId].y;\r\n                });\r\n                metadata.targetsY = _splitTargetsY(op.targets, classicalRegY, registers);\r\n            }\r\n            // Expand column size, if needed\r\n            if (metadata.width > columnsWidths[col]) {\r\n                columnsWidths[col] = metadata.width;\r\n            }\r\n            return metadata;\r\n        });\r\n    });\r\n    // Fill in x coord of each gate\r\n    var endX = _fillMetadataX(opsMetadata, columnsWidths);\r\n    // Flatten operations and filter out invalid gates\r\n    var metadataList = opsMetadata.flat().filter(function (_a) {\r\n        var type = _a.type;\r\n        return type != metadata_1.GateType.Invalid;\r\n    });\r\n    return { metadataList: metadataList, svgWidth: endX };\r\n};\r\nexports.processOperations = processOperations;\r\n/**\r\n * Group gates provided by operations into their respective registers.\r\n *\r\n * @param operations Array of operations.\r\n * @param numRegs    Total number of registers.\r\n *\r\n * @returns 2D array of indices where `groupedOps[i][j]` is the index of the operations\r\n *          at register `i` and column `j` (not yet aligned/padded).\r\n */\r\nvar _groupOperations = function (operations, registers) {\r\n    // NOTE: We get the max ID instead of just number of keys because there can be a qubit ID that\r\n    // isn't acted upon and thus does not show up as a key in registers.\r\n    var numRegs = Math.max.apply(Math, __spreadArrays([-1], Object.keys(registers).map(Number))) + 1;\r\n    var groupedOps = Array.from(Array(numRegs), function () { return new Array(0); });\r\n    operations.forEach(function (_a, instrIdx) {\r\n        var targets = _a.targets, controls = _a.controls;\r\n        var ctrls = controls || [];\r\n        var qRegs = __spreadArrays(ctrls, targets).filter(function (_a) {\r\n            var type = _a.type;\r\n            return (type || register_1.RegisterType.Qubit) === register_1.RegisterType.Qubit;\r\n        });\r\n        var qRegIdxList = qRegs.map(function (_a) {\r\n            var qId = _a.qId;\r\n            return qId;\r\n        });\r\n        var clsControls = ctrls.filter(function (_a) {\r\n            var type = _a.type;\r\n            return (type || register_1.RegisterType.Qubit) === register_1.RegisterType.Classical;\r\n        });\r\n        var isClassicallyControlled = clsControls.length > 0;\r\n        if (!isClassicallyControlled && qRegs.length === 0)\r\n            return;\r\n        // If operation is classically-controlled, pad all qubit registers. Otherwise, only pad\r\n        // the contiguous range of registers that it covers.\r\n        var minRegIdx = isClassicallyControlled ? 0 : Math.min.apply(Math, qRegIdxList);\r\n        var maxRegIdx = isClassicallyControlled ? numRegs - 1 : Math.max.apply(Math, qRegIdxList);\r\n        // Add operation also to registers that are in-between target registers\r\n        // so that other gates won't render in the middle.\r\n        for (var i = minRegIdx; i <= maxRegIdx; i++) {\r\n            groupedOps[i].push(instrIdx);\r\n        }\r\n    });\r\n    return groupedOps;\r\n};\r\nexports._groupOperations = _groupOperations;\r\n/**\r\n * Aligns operations by padding registers with `null`s to make sure that multiqubit\r\n * gates are in the same column.\r\n * e.g. ---[x]---[x]--\r\n *      ----------|---\r\n *\r\n * @param ops 2D array of operations. Each row represents a register\r\n *            and the operations acting on it (in-order).\r\n *\r\n * @returns 2D array of aligned operations padded with `null`s.\r\n */\r\nvar _alignOps = function (ops) {\r\n    var maxNumOps = Math.max.apply(Math, __spreadArrays([0], ops.map(function (regOps) { return regOps.length; })));\r\n    var col = 0;\r\n    // Deep copy ops to be returned as paddedOps\r\n    var paddedOps = JSON.parse(JSON.stringify(ops));\r\n    while (col < maxNumOps) {\r\n        var _loop_1 = function (regIdx) {\r\n            var reg = paddedOps[regIdx];\r\n            if (reg.length <= col)\r\n                return \"continue\";\r\n            // Should never be null (nulls are only padded to previous columns)\r\n            var opIdx = reg[col];\r\n            // Get position of gate\r\n            var targetsPos = paddedOps.map(function (regOps) { return regOps.indexOf(opIdx); });\r\n            var gatePos = Math.max.apply(Math, __spreadArrays([-1], targetsPos));\r\n            // If current column is not desired gate position, pad with null\r\n            if (col < gatePos) {\r\n                paddedOps[regIdx].splice(col, 0, null);\r\n                maxNumOps = Math.max(maxNumOps, paddedOps[regIdx].length);\r\n            }\r\n        };\r\n        for (var regIdx = 0; regIdx < paddedOps.length; regIdx++) {\r\n            _loop_1(regIdx);\r\n        }\r\n        col++;\r\n    }\r\n    return paddedOps;\r\n};\r\nexports._alignOps = _alignOps;\r\n/**\r\n * Retrieves the starting index of each classical register.\r\n *\r\n * @param ops     Array of operations.\r\n * @param idxList 2D array of aligned operation indices.\r\n *\r\n * @returns Array of classical register and their starting column indices in the form [[column, register]].\r\n */\r\nvar _getClassicalRegStart = function (ops, idxList) {\r\n    var clsRegs = [];\r\n    idxList.forEach(function (reg) {\r\n        var _loop_2 = function (col) {\r\n            var opIdx = reg[col];\r\n            if (opIdx != null && ops[opIdx].isMeasurement) {\r\n                var targetClsRegs = ops[opIdx].targets.filter(function (reg) { return reg.type === register_1.RegisterType.Classical; });\r\n                targetClsRegs.forEach(function (reg) { return clsRegs.push([col, reg]); });\r\n            }\r\n        };\r\n        for (var col = 0; col < reg.length; col++) {\r\n            _loop_2(col);\r\n        }\r\n    });\r\n    return clsRegs;\r\n};\r\nexports._getClassicalRegStart = _getClassicalRegStart;\r\n/**\r\n * Maps operation to metadata (e.g. gate type, position, dimensions, text)\r\n * required to render the image.\r\n *\r\n * @param op        Operation to be mapped into metadata format.\r\n * @param registers Array of registers.\r\n *\r\n * @returns Metadata representation of given operation.\r\n */\r\nvar _opToMetadata = function (op, registers) {\r\n    var metadata = {\r\n        type: metadata_1.GateType.Invalid,\r\n        x: 0,\r\n        controlsY: [],\r\n        targetsY: [],\r\n        label: '',\r\n        width: -1,\r\n    };\r\n    if (op == null)\r\n        return metadata;\r\n    var gate = op.gate, dataAttributes = op.dataAttributes, displayArgs = op.displayArgs, isMeasurement = op.isMeasurement, isConditional = op.isConditional, isControlled = op.isControlled, isAdjoint = op.isAdjoint, controls = op.controls, targets = op.targets, children = op.children, conditionalRender = op.conditionalRender;\r\n    // Set y coords\r\n    metadata.controlsY = (controls === null || controls === void 0 ? void 0 : controls.map(function (reg) { return _getRegY(reg, registers); })) || [];\r\n    metadata.targetsY = targets.map(function (reg) { return _getRegY(reg, registers); });\r\n    if (isConditional) {\r\n        // Classically-controlled operations\r\n        if (children == null || children.length == 0)\r\n            throw new Error('No children operations found for classically-controlled operation.');\r\n        // Gates to display when classical bit is 0.\r\n        var onZeroOps = children.filter(function (op) { return op.conditionalRender !== circuit_1.ConditionalRender.OnOne; });\r\n        var childrenInstrs = processOperations(onZeroOps, registers);\r\n        var zeroGates = childrenInstrs.metadataList;\r\n        var zeroChildWidth = childrenInstrs.svgWidth;\r\n        // Gates to display when classical bit is 1.\r\n        var onOneOps = children.filter(function (op) { return op.conditionalRender !== circuit_1.ConditionalRender.OnZero; });\r\n        childrenInstrs = processOperations(onOneOps, registers);\r\n        var oneGates = childrenInstrs.metadataList;\r\n        var oneChildWidth = childrenInstrs.svgWidth;\r\n        // Subtract startX (left-side) and 2*gatePadding (right-side) from nested child gates width\r\n        var width = Math.max(zeroChildWidth, oneChildWidth) - constants_1.startX - constants_1.gatePadding * 2;\r\n        metadata.type = metadata_1.GateType.ClassicalControlled;\r\n        metadata.children = [zeroGates, oneGates];\r\n        // Add additional width from control button and inner box padding for dashed box\r\n        metadata.width = width + constants_1.controlBtnOffset + constants_1.groupBoxPadding * 2;\r\n        // Set targets to first and last quantum registers so we can render the surrounding box\r\n        // around all quantum registers.\r\n        var qubitsY = Object.values(registers).map(function (_a) {\r\n            var y = _a.y;\r\n            return y;\r\n        });\r\n        if (qubitsY.length > 0)\r\n            metadata.targetsY = [Math.min.apply(Math, qubitsY), Math.max.apply(Math, qubitsY)];\r\n    }\r\n    else if (conditionalRender == circuit_1.ConditionalRender.AsGroup && ((children === null || children === void 0 ? void 0 : children.length) || 0) > 0) {\r\n        var childrenInstrs = processOperations(children, registers);\r\n        metadata.type = metadata_1.GateType.Group;\r\n        metadata.children = childrenInstrs.metadataList;\r\n        // Subtract startX (left-side) and add inner box padding (minus nested gate padding) for dashed box\r\n        metadata.width = childrenInstrs.svgWidth - constants_1.startX + (constants_1.groupBoxPadding - constants_1.gatePadding) * 2;\r\n    }\r\n    else if (isMeasurement) {\r\n        metadata.type = metadata_1.GateType.Measure;\r\n    }\r\n    else if (gate === 'SWAP') {\r\n        metadata.type = metadata_1.GateType.Swap;\r\n    }\r\n    else if (isControlled) {\r\n        metadata.type = gate === 'X' ? metadata_1.GateType.Cnot : metadata_1.GateType.ControlledUnitary;\r\n        metadata.label = gate;\r\n    }\r\n    else if (gate === 'X') {\r\n        metadata.type = metadata_1.GateType.X;\r\n        metadata.label = gate;\r\n    }\r\n    else {\r\n        // Any other gate treated as a simple unitary gate\r\n        metadata.type = metadata_1.GateType.Unitary;\r\n        metadata.label = gate;\r\n    }\r\n    // If adjoint, add ' to the end of gate label\r\n    if (isAdjoint && metadata.label.length > 0)\r\n        metadata.label += \"'\";\r\n    // If gate has extra arguments, display them\r\n    if (displayArgs != null)\r\n        metadata.displayArgs = displayArgs;\r\n    // Set gate width\r\n    metadata.width = utils_1.getGateWidth(metadata);\r\n    // Set custom user-provided gate metadata\r\n    if (dataAttributes != null)\r\n        metadata.dataAttributes = dataAttributes;\r\n    return metadata;\r\n};\r\nexports._opToMetadata = _opToMetadata;\r\n/**\r\n * Compute the y coord of a given register.\r\n *\r\n * @param reg       Register to compute y coord of.\r\n * @param registers Map of qubit IDs to RegisterMetadata.\r\n *\r\n * @returns The y coord of give register.\r\n */\r\nvar _getRegY = function (reg, registers) {\r\n    var type = reg.type, qId = reg.qId, cId = reg.cId;\r\n    if (!registers.hasOwnProperty(qId))\r\n        throw new Error(\"ERROR: Qubit register with ID \" + qId + \" not found.\");\r\n    var _a = registers[qId], y = _a.y, children = _a.children;\r\n    switch (type) {\r\n        case undefined:\r\n        case register_1.RegisterType.Qubit:\r\n            return y;\r\n        case register_1.RegisterType.Classical:\r\n            if (children == null)\r\n                throw new Error(\"ERROR: No classical registers found for qubit ID \" + qId + \".\");\r\n            if (cId == null)\r\n                throw new Error(\"ERROR: No ID defined for classical register associated with qubit ID \" + qId + \".\");\r\n            if (children.length <= cId)\r\n                throw new Error(\"ERROR: Classical register ID \" + cId + \" invalid for qubit ID \" + qId + \" with \" + children.length + \" classical register(s).\");\r\n            return children[cId].y;\r\n        default:\r\n            throw new Error(\"ERROR: Unknown register type \" + type + \".\");\r\n    }\r\n};\r\nexports._getRegY = _getRegY;\r\n/**\r\n * Splits `targets` if non-adjacent or intersected by classical registers.\r\n *\r\n * @param targets       Target qubit registers.\r\n * @param classicalRegY y coords of classical registers overlapping current column.\r\n * @param registers     Mapping from register qubit IDs to register metadata.\r\n *\r\n * @returns Groups of target qubit y coords.\r\n */\r\nvar _splitTargetsY = function (targets, classicalRegY, registers) {\r\n    if (targets.length === 0)\r\n        return [];\r\n    // Get qIds sorted by ascending y value\r\n    var orderedQIds = Object.keys(registers).map(Number);\r\n    orderedQIds.sort(function (a, b) { return registers[a].y - registers[b].y; });\r\n    var qIdPosition = {};\r\n    orderedQIds.forEach(function (qId, i) { return (qIdPosition[qId] = i); });\r\n    // Sort targets and classicalRegY by ascending y value\r\n    targets = targets.slice();\r\n    targets.sort(function (a, b) {\r\n        var posDiff = qIdPosition[a.qId] - qIdPosition[b.qId];\r\n        if (posDiff === 0 && a.cId != null && b.cId != null)\r\n            return a.cId - b.cId;\r\n        else\r\n            return posDiff;\r\n    });\r\n    classicalRegY = classicalRegY.slice();\r\n    classicalRegY.sort(function (a, b) { return a - b; });\r\n    var prevPos = 0;\r\n    var prevY = 0;\r\n    return targets.reduce(function (groups, target) {\r\n        var y = _getRegY(target, registers);\r\n        var pos = qIdPosition[target.qId];\r\n        // Split into new group if one of the following holds:\r\n        //      1. First target register\r\n        //      2. Non-adjacent qubit registers\r\n        //      3. There is a classical register between current and previous register\r\n        if (groups.length === 0 || pos > prevPos + 1 || (classicalRegY[0] > prevY && classicalRegY[0] < y))\r\n            groups.push([y]);\r\n        else\r\n            groups[groups.length - 1].push(y);\r\n        prevPos = pos;\r\n        prevY = y;\r\n        // Remove classical registers that are higher than current y\r\n        while (classicalRegY.length > 0 && classicalRegY[0] <= y)\r\n            classicalRegY.shift();\r\n        return groups;\r\n    }, []);\r\n};\r\nexports._splitTargetsY = _splitTargetsY;\r\n/**\r\n * Updates the x coord of each metadata in the given 2D array of metadata and returns rightmost x coord.\r\n *\r\n * @param opsMetadata  2D array of metadata.\r\n * @param columnWidths Array of column widths.\r\n *\r\n * @returns Rightmost x coord.\r\n */\r\nvar _fillMetadataX = function (opsMetadata, columnWidths) {\r\n    var currX = constants_1.startX;\r\n    var colStartX = columnWidths.map(function (width) {\r\n        var x = currX;\r\n        currX += width + constants_1.gatePadding * 2;\r\n        return x;\r\n    });\r\n    var endX = currX;\r\n    opsMetadata.forEach(function (regOps) {\r\n        return regOps.forEach(function (metadata, col) {\r\n            var x = colStartX[col];\r\n            switch (metadata.type) {\r\n                case metadata_1.GateType.ClassicalControlled:\r\n                case metadata_1.GateType.Group:\r\n                    // Subtract startX offset from nested gates and add offset and padding\r\n                    var offset = x - constants_1.startX + constants_1.groupBoxPadding;\r\n                    if (metadata.type === metadata_1.GateType.ClassicalControlled)\r\n                        offset += constants_1.controlBtnOffset;\r\n                    // Offset each x coord in children gates\r\n                    _offsetChildrenX(metadata.children, offset);\r\n                    // We don't use the centre x coord because we only care about the rightmost x for\r\n                    // rendering the box around the group of nested gates\r\n                    metadata.x = x;\r\n                    break;\r\n                default:\r\n                    metadata.x = x + columnWidths[col] / 2;\r\n                    break;\r\n            }\r\n        });\r\n    });\r\n    return endX;\r\n};\r\nexports._fillMetadataX = _fillMetadataX;\r\n/**\r\n * Offset x coords of nested children operations.\r\n *\r\n * @param children 2D array of children metadata.\r\n * @param offset   x coord offset.\r\n */\r\nvar _offsetChildrenX = function (children, offset) {\r\n    if (children == null)\r\n        return;\r\n    children.flat().forEach(function (child) {\r\n        child.x += offset;\r\n        _offsetChildrenX(child.children, offset);\r\n    });\r\n};\r\nexports._offsetChildrenX = _offsetChildrenX;\r\n"],"sourceRoot":""}